# This is a TOML configuration file.

# Connection details of ethereum blockchain.
[ethereum]
  URL = "ws://127.0.0.1:8545"
  URLRPC = "http://127.0.0.1:8546"
  # Uncomment to override the defaults for transaction status monitoring.
	#
	# MiningCheckInterval is the interval in which transaction
	# mining status is checked. If the transaction is not mined within this
	# time, the gas price is increased and transaction is resubmitted.
	#
	# MiningCheckInterval = 60  # 60 sec (default value)
	#
	# MaxGasPrice specifies the default maximum gas price the client is
	# willing to pay for the transaction to be mined. The offered transaction
	# gas price can not be higher than the max gas price value. If the maximum
	# allowed gas price is reached, no further resubmission attempts are
	# performed.
	#
	# MaxGasPrice = 500000000000 # 500 Gwei (default value)
	#
  # Uncomment to enable Ethereum node rate limiting. Both properties can be
  # used together or separately.
  	#
	# RequestsPerSecondLimit sets the maximum average number of requests
	# per second which can be executed against the Ethereum node.
	# All types of Ethereum node requests are rate-limited,
	# including view function calls.
	#
	# RequestsPerSecondLimit = 150
	#
	# ConcurrencyLimit sets the maximum number of concurrent requests which
	# can be executed against the Ethereum node at the same time.
	# This limit affects all types of Ethereum node requests,
	# including view function calls.
	#
	# ConcurrencyLimit = 30

[ethereum.account]
  KeyFile = "/Users/someuser/ethereum/data/keystore/UTC--2018-03-11T01-37-33.202765887Z--AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAAAAAA"

# Addresses of contracts deployed on ethereum blockchain.
[ethereum.ContractAddresses]
  BondedECDSAKeepFactory = "0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"

# Addresses of applications approved by the operator.
[SanctionedApplications]
  Addresses = [
    "0xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD",
    "0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"
  ]

[Storage]
  DataDir = "/my/secure/location"

# [LibP2P]
# 	Peers = ["/ip4/127.0.0.1/tcp/3919/ipfs/njOXcNpVTweO3fmX72OTgDX9lfb1AYiiq4BN6Da1tFy9nT3sRT2h1"]
# 	Port = 3920
#   # Uncomment to override the node's default addresses announced in the network
#   # AnnouncedAddresses = ["/dns4/example.com/tcp/3919", "/ip4/80.70.60.50/tcp/3919"]

[Client]
# Look-back period to check if existing, active keeps are awaiting signer generation.
# When the client starts, it goes through all keeps registered on-chain to check
# whether it's a member of one of them and to generate the signing key if needed.
# The client does not check keeps older than `AwaitingKeyGenerationLookback` to
# minimize the number of calls to the chain.
#  AwaitingKeyGenerationLookback = "24h"	# optional

# Timeouts for processes execution. Within these timeouts the process will keep
# retrying to generate a signer or calculate a signature. The values should be
# provided based on the sanctioned application requirements.
#  KeyGenerationTimeout = "3h" 				# optional
#  SigningTimeout = "2h"					# optional

[TSS]
# Timeout for TSS protocol pre-parameters generation. The value
# should be provided based on resources available on the machine running the client.
# This is an optional parameter, if not provided timeout for TSS protocol
# pre-parameters generation will be set to `2 minutes`.
#  PreParamsGenerationTimeout = "2m30s"

# Uncomment to enable the metrics module which collects and exposes information
# useful for external monitoring tools usually operating on time series data.
# All values exposed by metrics module are quantifiable or countable.
#
# The following metrics are available:
# - connected peers count
# - connected bootstraps count
# - eth client connectivity status
#
# The port on which the `/metrics` endpoint will be available and the frequency
# with which the metrics will be collected can be customized using the
# below parameters.
# [Metrics]
    # Port = 8080
    # NetworkMetricsTick = 60
    # EthereumMetricsTick = 600

# Uncomment to enable the diagnostics module which exposes information useful
# for debugging and diagnostic client's status.
#
# Diagnostics module exposes the following information:
# - list of connected peers along with their network id and ethereum operator address
# - information about the client's network id and ethereum operator address
#
# The port on which the `/diagnostics` endpoint will be available can be
# customized below.
# [Diagnostics]
	# Port = 8081