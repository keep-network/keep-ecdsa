const fs = require('fs');
const toml = require('toml');
const tomlify = require('tomlify-j0.4');
const concat = require('concat-stream');

// ETH host info
const ethHost = process.env.ETH_HOSTNAME;
const ethWsPort = process.env.ETH_WS_PORT;
const ethNetworkId = process.env.ETH_NETWORK_ID;

/*
Each <contract.json> file is sourced directly from the InitContainer.  Files are generated by
Truffle during contract migration and copied to the InitContainer image via Circle.
The files can be also migrated by external projects and fetched to the local directory.
*/

const bondedECDSAKeepFactoryJsonFile = '/tmp/BondedECDSAKeepFactory.json';
const bondedECDSAKeepFactoryParsed = JSON.parse(fs.readFileSync(bondedECDSAKeepFactoryJsonFile));
const bondedECDSAKeepFactoryContractAddress = bondedECDSAKeepFactoryParsed.networks[ethNetworkId].address;

const tbtcSystemJsonFile = '/tmp/TBTCSystem.json';
const tbtcSystemParsed = JSON.parse(fs.readFileSync(tbtcSystemJsonFile));
const tbtcSystemContractAddress = tbtcSystemParsed.networks[ethNetworkId].address;

async function provisionKeepTecdsa() {

  try {

    console.log('###########  Provisioning keep-tecdsa! ###########');
    console.log('\n<<<<<<<<<<<< Creating keep-tecdsa Config File >>>>>>>>>>>>');
    await createKeepTecdsaConfig();

    console.log("\n########### keep-tecdsa Provisioning Complete! ###########");
  }
  catch (error) {
    console.error(error.message);
    throw error;
  }
};

async function createKeepTecdsaConfig() {

  fs.createReadStream('/tmp/keep-tecdsa-template.toml', 'utf8').pipe(concat(function (data) {
    let parsedConfigFile = toml.parse(data);

    parsedConfigFile.ethereum.URL = ethHost.replace('http://', 'ws://') + ':' + ethWsPort;
    parsedConfigFile.ethereum.account.KeyFile = [
      process.env.KEEP_TECDSA_ETH_KEYFILE_1,
      process.env.KEEP_TECDSA_ETH_KEYFILE_2,
      process.env.KEEP_TECDSA_ETH_KEYFILE_3
    ]
    parsedConfigFile.ethereum.ContractAddresses.BondedECDSAKeepFactory = bondedECDSAKeepFactoryContractAddress;

    parsedConfigFile.SanctionedApplications.Addresses = [tbtcSystemContractAddress]

    parsedConfigFile.Storage.DataDir = process.env.KEEP_DATA_DIR;

    fs.writeFile('/mnt/keep-tecdsa/config/keep-tecdsa-config.toml', tomlify.toToml(parsedConfigFile), (error) => {
      if (error) throw error;
    });
  }));

  console.log("keep-tecdsa config written to /mnt/keep-tecdsa/config/keep-tecdsa-config.toml");
};

provisionKeepTecdsa().catch(error => {
  console.error(error);
  process.exit(1);
});
