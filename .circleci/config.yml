version: 2.1

executors:
  docker-node:
    docker:
      - image: circleci/node:11
  docker-node-gcloud:
    docker:
      - image: appfarm/node-gcloud-base
  docker-git:
    docker:
      - image: docker:18.06.0-ce-git
  docker-thesis-buildpack:
    docker:
      - image: thesisco/docker-buildpack:bionic

orbs:
  gcp-cli: circleci/gcp-cli@1.8.2
  gcp-gcr: circleci/gcp-gcr@0.0.4

jobs:
  lint:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: solidity
      - run:
          name: Install dependencies
          working_directory: ~/project/solidity
          command: npm ci
      - run:
          name: Lint Implementation
          working_directory: ~/project/solidity
          command: |
            set -ex
            npm run lint
  build_and_test_solidity:
    executor: docker-node
    steps:
      - checkout
      - attach_workspace:
          at: solidity
      - run: npm install ganache-cli@6.9.1
      - run:
          name: Running testrpc
          command: |
            cd $(npm bin)
            ./ganache-cli
          background: true
      - run:
          name: Setup solidity
          working_directory: ~/project/solidity
          command: npm ci
      - run:
          name: Build solidity contracts
          working_directory: ~/project/solidity
          command: npm run build
      - run:
          name: Run solidity tests
          working_directory: ~/project/solidity
          command: npm run test
  build_client_and_test_go:
    executor: docker-git
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - attach_workspace:
          at: solidity
      - run:
          name: Build Go build environment image
          command: |
            docker build \
              --build-arg GITHUB_TOKEN=$GITHUB_TOKEN\
              --build-arg GOPRIVATE=$GOPRIVATE\
              --tag go-build-env \
              --target gobuild .
      - run:
          name: Run Go tests
          command: |
            docker run \
              --workdir /go/src/github.com/keep-network/keep-ecdsa \
              go-build-env \
              go test ./.../
      - run:
          name: Build keep-ecdsa runtime image
          command: |
            docker build \
              --build-arg GITHUB_TOKEN=$GITHUB_TOKEN \
              --tag keep-ecdsa .
      - run:
          name: Save keep-ecdsa image
          command: |
            mkdir -p /tmp/keep-ecdsa/docker-images
            docker save \
              --output /tmp/keep-ecdsa/docker-images/keep-ecdsa.tar \
              keep-ecdsa
      - persist_to_workspace:
          root: /tmp/keep-ecdsa
          paths:
            - docker-images
  build_initcontainer:
    executor: docker-thesis-buildpack
    steps:
      - attach_workspace:
          at: /tmp/keep-ecdsa
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Set Gcloud Auth for bucket access
          command: |
            echo $GCLOUD_SERVICE_KEY > ~/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      - run:
          name: Build keep-ecdsa-initcontainer image
          working_directory: ~/project/infrastructure/kube/templates/keep-ecdsa/initcontainer/provision-keep-ecdsa/
          command: |
            gsutil cp gs://${CONTRACT_DATA_BUCKET}/keep-core/KeepToken.json .
            gsutil cp gs://${CONTRACT_DATA_BUCKET}/keep-core/TokenStaking.json .
            cp /tmp/keep-ecdsa/contracts/BondedECDSAKeepFactory.json .
            cp /tmp/keep-ecdsa/contracts/KeepBonding.json .

            docker build \
              --tag initcontainer-provision-keep-ecdsa .
      - run:
          name: Save keep-ecdsa-initcontainer image
          command: |
            mkdir -p /tmp/keep-ecdsa/docker-images
            docker save \
              --output /tmp/keep-ecdsa/docker-images/initcontainer-provision-keep-ecdsa.tar \
              initcontainer-provision-keep-ecdsa
      - persist_to_workspace:
          root: /tmp/keep-ecdsa
          paths:
            - docker-images
  migrate_contracts:
    executor: docker-node-gcloud
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Set Gcloud Auth for bucket access
          command: |
            echo $GCLOUD_SERVICE_KEY > ~/gcloud-service-key.json
            gcloud auth activate-service-account --key-file ~/gcloud-service-key.json
      - run:
          name: Fetch external contracts artifacts
          command: |
            # This needs to be part of a base docker image, not installed here.
            apt-get update
            apt-get install jq -y
            solidity/scripts/circleci-provision-external-contracts.sh
      - run:
          name: Migrate Contracts
          command: |
            export BUILD_TAG=$CIRCLE_SHA1
            export TRUFFLE_NETWORK=$TRUFFLE_NETWORK
            solidity/scripts/circleci-migrate-contracts.sh
      - persist_to_workspace:
          root: /tmp/keep-ecdsa
          paths:
            - contracts
  publish_npm_package:
    executor: docker-node
    steps:
      - attach_workspace:
          at: /tmp/keep-ecdsa
      - checkout
      - run:
          name: Bump and publish npm package
          working_directory: ~/project/solidity
          command: |
            set -x
            mkdir -p artifacts
            cp -r /tmp/keep-ecdsa/contracts/* artifacts/
            name=$(jq --raw-output .name package.json)
            version=$(jq --raw-output .version package.json)
            preid=$(echo $version | sed -e s/^.*-\\\([^.]*\\\).*$/\\1/)

            # Find the latest published package version matching this preid.
            # Note that in jq, we wrap the result in an array and then flatten;
            # this is because npm show json contains a single string if there
            # is only one matching version, or an array if there are multiple,
            # and we want to look at an array always.
            latest_version=$(npm show -json "$name@^$version" version | jq --raw-output "[.] | flatten | .[-1]")
            latest_version=${latest_version:-$version}
            if [ -z $latest_version ]; then
              echo "Latest version calculation failed. Resolved info:"
              echo "$name@$version ; preid $preid"
              exit 1
            fi

            # Update package.json with the latest published package version matching this
            # preid to prepare for bumping.
            echo $(jq -M ".version=\"${latest_version}\"" package.json) > package.json

            # Bump without doing any git work. Versioning is a build-time action for us.
            # Consider including commit id? Would be +<commit id>.
            npm version prerelease --preid=$preid --no-git-tag-version

            # Fix resolved dependency versions.
            npm update

            # Publish to npm.
            echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
            npm publish --access=public
  publish_client:
    executor: gcp-gcr/default
    steps:
      - attach_workspace:
          at: /tmp/keep-ecdsa
      - run:
          name: Load Docker image
          command: |
            docker load -i /tmp/keep-ecdsa/docker-images/keep-ecdsa.tar
      - run:
          name: Tag Docker image
          command: |
            docker tag keep-ecdsa $GCR_REGISTRY_URL/$GOOGLE_PROJECT_ID/keep-ecdsa
      - gcp-gcr/gcr-auth:
          google-project-id: GOOGLE_PROJECT_ID
          google-compute-zone: GOOGLE_COMPUTE_ZONE_A
          # This param doesn't actually set anything, leaving here as a reminder to check when they fix it.
          gcloud-service-key: GCLOUD_SERVICE_KEY
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: $GCR_REGISTRY_URL
          image: keep-ecdsa
          tag: latest
  publish_initcontainer_provision_keep_ecdsa:
    executor: gcp-gcr/default
    steps:
      - attach_workspace:
          at: /tmp/keep-ecdsa
      - run:
          name: Load Docker image
          command: |
            docker load -i /tmp/keep-ecdsa/docker-images/initcontainer-provision-keep-ecdsa.tar
      - run:
          name: Tag Docker image
          command: |
            docker tag initcontainer-provision-keep-ecdsa $GCR_REGISTRY_URL/$GOOGLE_PROJECT_ID/initcontainer-provision-keep-ecdsa
      - gcp-gcr/gcr-auth:
          google-project-id: GOOGLE_PROJECT_ID
          google-compute-zone: GOOGLE_COMPUTE_ZONE_A
          # This param doesn't actually set anything, leaving here as a reminder to check when they fix it.
          gcloud-service-key: GCLOUD_SERVICE_KEY
      - gcp-gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          registry-url: $GCR_REGISTRY_URL
          image: initcontainer-provision-keep-ecdsa
          tag: latest
  publish_contract_data:
    executor: gcp-cli/default
    steps:
      - attach_workspace:
          at: /tmp/keep-ecdsa
      - gcp-cli/install
      - gcp-cli/initialize:
          google-project-id: GOOGLE_PROJECT_ID
          google-compute-zone: GOOGLE_COMPUTE_ZONE_A
          # This param doesn't actually set anything, leaving here as a reminder to check when they fix it.
          gcloud-service-key: GCLOUD_SERVICE_KEY
      - run:
          name: Upload contract data
          command: |
            cd /tmp/keep-ecdsa/contracts
            gsutil -m cp * gs://${CONTRACT_DATA_BUCKET}/keep-ecdsa

workflows:
  version: 2
  lint:
    jobs:
      - lint
  solidity:
    jobs:
      - build_and_test_solidity
  build-test-publish-keep-dev:
    jobs:
      - build_client_and_test_go
      - publish_client:
          context: keep-dev
          filters:
            branches:
              only: master
          requires:
            - build_client_and_test_go
  build-test-migrate-publish-keep-test:
    jobs:
      - keep_test_approval:
          type: approval
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
      - build_client_and_test_go:
          context: github-package-registry
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - keep_test_approval
      - migrate_contracts:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - build_client_and_test_go
      - build_initcontainer:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - migrate_contracts
      - publish_client:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - build_client_and_test_go
            - build_initcontainer
            - migrate_contracts
      - publish_initcontainer_provision_keep_ecdsa:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - build_client_and_test_go
            - build_initcontainer
            - migrate_contracts
      - publish_npm_package:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - migrate_contracts
      - publish_contract_data:
          context: keep-test
          filters:
            tags:
              only: /^v.*/
            branches:
              only: /releases\/.*/
          requires:
            - migrate_contracts
